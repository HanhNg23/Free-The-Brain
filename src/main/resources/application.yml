logging:
  level:
    org:
      springframework:
        security: TRACE
        
server:
  port: 8080
  
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    password: hanh3533.
    url: jdbc:mysql://localhost:3306/demo_springsocial
    username: root
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        format_sql: true
        use_sql_comments: true
        
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 991857807583-1q4d59iaeqha2tddv66pm8kv6apre5jb.apps.googleusercontent.com
            client-secret: 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
            redirectUri: "{baseUrl}/oauth2/redirect/{registrationId}"
            scope:
            - email
            #- picture
            #- fullName
            #- idToken

app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    #accessToken: 2 minutes
    accessTokenExpirationMsec: 120000 
    #refreshToken: 15 minutes
    refreshTokenExpirationMsec: 900000
  cors:
    allowedOrigins: http://localhost:8080 
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:8080/oauth2/redirect	